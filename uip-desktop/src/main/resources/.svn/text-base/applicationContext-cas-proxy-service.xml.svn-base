<?xml version="1.0"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:security="http://www.springframework.org/schema/security"
	   xmlns:context="http://www.springframework.org/schema/context" 
	   xmlns:p="http://www.springframework.org/schema/p"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	                    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
                        http://www.springframework.org/schema/security 
                           http://www.springframework.org/schema/security/spring-security-3.1.xsd
                           http://www.springframework.org/schema/context 
                           http://www.springframework.org/schema/context/spring-context-3.0.xsd">

	<bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>  
	<context:property-placeholder location="classpath*:conf.properties"/>
	
	<!-- Enable security, let the casAuthenticationEntryPoint handle all intercepted 
		urls. The CAS_FILTER needs to be in the right position within the filter 
		chain. -->
	<security:http entry-point-ref="casAuthenticationEntryPoint" auto-config="true" access-decision-manager-ref="myAccessDecisionManager">
		<!-- 不要过滤图片等静态资源 -->
		<security:intercept-url pattern="/**/*.jpg" access="IS_AUTHENTICATED_ANONYMOUSLY" />
		<security:intercept-url pattern="/**/*.png" access="IS_AUTHENTICATED_ANONYMOUSLY" />
		<security:intercept-url pattern="/**/*.gif" access="IS_AUTHENTICATED_ANONYMOUSLY" />
		<security:intercept-url pattern="/**/*.css" access="IS_AUTHENTICATED_ANONYMOUSLY" />
		<security:intercept-url pattern="/**/*.js" access="IS_AUTHENTICATED_ANONYMOUSLY" />
		
		<security:intercept-url pattern="/**" access="ROLE_USER" />
		
		<security:session-management session-authentication-strategy-ref="sessionAuthenticationStrategy"/>  
		<security:custom-filter position="CONCURRENT_SESSION_FILTER" ref="concurrencyFilter" />
		
        <security:custom-filter ref="requestSingleLogoutFilter" before="LOGOUT_FILTER"/>
        <security:custom-filter ref="singleLogoutFilter" before="CAS_FILTER"/>
		 
		<security:custom-filter position="CAS_FILTER" ref="casAuthenticationFilter" />
		
		<!-- 增加一个自定义的filter，放在FILTER_SECURITY_INTERCEPTOR之前， 实现用户、角色、权限、资源的数据库管理。 -->
		<security:custom-filter ref="mySecurityFilter" before="FILTER_SECURITY_INTERCEPTOR" />
	</security:http>
	
	<!-- The entryPoint intercepts all the CAS authentication requests. It redirects 
		 to the CAS loginUrl for the CAS login page. -->
	<bean id="casAuthenticationEntryPoint"
		class="org.springframework.security.cas.web.CasAuthenticationEntryPoint">
		<property name="loginUrl" value="${cas.server.url}/login"></property>
		<property name="serviceProperties" ref="serviceProperties"></property>
	</bean>

	<bean id="sessionAuthenticationStrategy" class="org.springframework.security.web.authentication.session.ConcurrentSessionControlStrategy">  
        <constructor-arg name="sessionRegistry" ref="sessionRegistry" />  
        <property name="maximumSessions" value="-1" />  
    </bean>  
  
    <bean id="sessionRegistry" class="org.springframework.security.core.session.SessionRegistryImpl" />  
          
          
    <bean id="concurrencyFilter" class="org.springframework.security.web.session.ConcurrentSessionFilter">  
        <property name="sessionRegistry" ref="sessionRegistry" />  
        <property name="expiredUrl" value="/j_spring_cas_security_logout" />  
    </bean>  
    
    
    <!-- This filter handles a Single Logout Request from the CAS Server -->
    <bean id="singleLogoutFilter" class="org.jasig.cas.client.session.SingleSignOutFilter"/>
    <!-- This filter redirects to the CAS Server to signal Single Logout should be performed -->
    <bean id="requestSingleLogoutFilter" class="org.springframework.security.web.authentication.logout.LogoutFilter"
        p:filterProcessesUrl="/j_spring_cas_security_logout">
        <constructor-arg value="${cas.server.url}/logout?service=${cas.client.url}/index"/>
        <constructor-arg>
            <bean class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler"/>
        </constructor-arg>
    </bean>
	<!-- The CAS filter handles the redirect from the CAS server and starts 
		the ticket validation. -->
	<bean id="casAuthenticationFilter" class="org.springframework.security.cas.web.CasAuthenticationFilter">
		<property name="authenticationManager" ref="authenticationManager" />
				
		<property name="sessionAuthenticationStrategy" ref="sessionAuthenticationStrategy" />  
		
		<property name="serviceProperties" ref="serviceProperties"/>
    	<property name="authenticationDetailsSource">
      		<bean class="org.springframework.security.cas.web.authentication.ServiceAuthenticationDetailsSource"/>
    	</property>
	</bean>
	 

	<!-- Required for the casProcessingFilter, so define it explicitly set and 
		specify an Id Even though the authenticationManager is created by default 
		when namespace based config is used. -->
	<security:authentication-manager alias="authenticationManager">
		<security:authentication-provider ref="casAuthenticationProvider" />
	</security:authentication-manager>
	
	<!-- Handles the CAS ticket processing. -->
	<bean id="casAuthenticationProvider"
		class="org.springframework.security.cas.authentication.CasAuthenticationProvider">
		<property name="authenticationUserDetailsService" ref="authenticationUserDetailsService" />
		<property name="serviceProperties" ref="serviceProperties"></property>
		<property name="key" value="cas"></property>
		<property name="ticketValidator">
      		<bean class="org.jasig.cas.client.validation.Cas20ProxyTicketValidator">
        		<constructor-arg value="${cas.server.url}"/>
        		<property name="encoding" value="utf-8"></property>
        		<property name="acceptAnyProxy" value="true"/>
      		</bean>
    	</property>
    	<!-- 
    	<property name="statelessTicketCache">
      		<bean class="org.springframework.security.cas.authentication.EhCacheBasedTicketCache">
        		<property name="cache">
          			<bean class="net.sf.ehcache.Cache" init-method="initialise" destroy-method="dispose">
            			<constructor-arg value="casTickets"/>
            			<constructor-arg value="50"/>
            			<constructor-arg value="true"/>
            			<constructor-arg value="false"/>
            			<constructor-arg value="3600"/>
            			<constructor-arg value="900"/>
          			</bean>
        		</property>
     		 </bean>
    	</property>
    	 -->
	</bean>
	
	<!-- This section is used to configure CAS. The service is the actual redirect 
		 that will be triggered after the CAS login sequence. -->
	<bean id="serviceProperties" class="org.springframework.security.cas.ServiceProperties">
		<property name="service"
			value="${cas.client.url}/j_spring_cas_security_check"></property>
		<property name="sendRenew" value="false"></property>
		
		<property name="authenticateAllArtifacts" value="true"/>
	</bean>
	
	<!-- authorities对应 CAS server的 登录属性， 在此设置到spirng security中，用于spring security的验证 -->
	<bean id="authenticationUserDetailsService"
		class="org.springframework.security.cas.userdetails.GrantedAuthorityFromAssertionAttributesUserDetailsService">
		<constructor-arg>
			<array>
				<value>authorities</value>
			</array>
		</constructor-arg>
	</bean>
	
	
	<!-- 一个自定义的filter -->
	<bean id="mySecurityFilter" class="com.proper.uip.security.spring.SecurityFilterImpl">
		<property name="authenticationManager" ref="authenticationManager" />
		<property name="accessDecisionManager" ref="myAccessDecisionManager" />
		<property name="securityMetadataSource" ref="mySecurityMetadataSource" />
	</bean>

	<!-- 访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源。 -->
	<bean id="myAccessDecisionManager" class="com.proper.uip.security.spring.AccessDecisionManagerImpl" />


	<!-- 资源源数据定义，将所有的资源和权限对应关系建立起来，即定义某一资源可以被哪些角色去访问。
	<b:bean id="mySecurityMetadataSource" class="com.proper.uip.security.spring.SecurityMetadataSourceImpl" />
	 -->
	 
</beans>
